{"ast":null,"code":"import axios from \"axios\";\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n\n/** API Class.\n *\n * Static class tying together methods used to get/send to to the API.\n * There shouldn't be any frontend-specific stuff here, and there shouldn't\n * be any API-aware stuff elsewhere in the frontend.\n *\n */\n\nexport class Api {\n  // the token for interactive with the API will be stored here.\n\n  /* skeleton method for get calls  */\n  static async request(endpoint) {\n    let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"get\";\n    console.debug(\"API Call:\", endpoint, data, method);\n\n    //there are multiple ways to pass an authorization token, this is how you pass it in the header.\n    //this has been provided to show you another way to pass the token. you are only expected to read this code for this project.\n    const url = \"\".concat(BASE_URL, \"/\").concat(endpoint);\n    const headers = {\n      Authorization: \"Bearer \".concat(Api.token)\n    };\n    console.log(\"headers::::::\", headers);\n    const params = method === \"get\" ? data : {};\n    try {\n      return (await axios({\n        url,\n        method,\n        data,\n        params,\n        headers\n      })).data;\n    } catch (err) {\n      console.error(\"API Error:\", err.response);\n      let message = err.response.data.error.message;\n      throw Array.isArray(message) ? message : [message];\n    }\n  }\n\n  // Individual API routes\n\n  /* Logs in a user */\n  static async login(username, password) {\n    let res = await this.request(\"auth/token\", {\n      username,\n      password\n    }, \"post\");\n    this.token = res.token;\n    console.log(\"login token,\", res.token);\n    return res.token;\n  }\n\n  /* registers a user */\n  static async signup(username, password, firstName, lastName) {\n    let res = await this.request(\"auth/register\", {\n      username,\n      password,\n      firstName,\n      lastName\n    }, \"post\");\n    this.token = res.token;\n    return res.token;\n  }\n  /* gets info on a user */\n  static async getUserInfo(username) {\n    let res = await this.request(\"users/\".concat(username));\n    return res;\n  }\n  static async getLinkToken() {\n    let res = await this.request(\"plaid/create_link_token\", {}, \"post\");\n    return res.link_token;\n  }\n  static async exchangePublicToken(publicToken) {\n    let res = await this.request(\"plaid/exchange_public_token\", {\n      publicToken\n    }, \"post\");\n    return res;\n  }\n  static async authGet() {\n    let res = await this.request(\"plaid/auth\", {}, \"post\");\n    return res;\n  }\n  static async authBalance() {\n    let res = await this.request(\"plaid/auth\", {}, \"post\");\n    const accountInfo = res.accounts.map(r => ({\n      name: r.official_name,\n      balance: r.balances\n    }));\n    return accountInfo;\n  }\n  static async saveTransactions(username) {\n    let res = await this.request(\"plaid/transactions\", {\n      username\n    }, \"post\");\n    return res.transactions;\n  }\n  static async getTransactions(year, month, orderByColumn, orderBy) {\n    // Check year and month values\n    console.log('Year:', year);\n    console.log('Month:', month);\n\n    // Set the start date to the first day of the selected month\n    let startDate = \"\".concat(year, \"-\").concat(String(month).padStart(2, '0'), \"-01\");\n\n    // Set the end date to the last day of the selected month\n    let endDate = \"\".concat(year, \"-\").concat(String(month).padStart(2, '0'), \"-\").concat(new Date(year, month, 0).getDate());\n\n    // Log API call parameters\n    console.log('API Call Parameters:', {\n      orderByColumn,\n      orderBy,\n      startDate,\n      endDate\n    });\n    try {\n      let res = await this.request(\"plaid/transactions\", {\n        user,\n        orderByColumn,\n        orderBy,\n        startDate,\n        endDate\n      });\n      return res.transactions;\n    } catch (error) {\n      console.error(\"API Error:\", error);\n      throw error;\n    }\n  }\n\n  /* update User */\n  static async updateUser(username, data) {\n    let res = await this.request(\"users/\".concat(username), data, \"patch\");\n    return res;\n  }\n}","map":{"version":3,"names":["axios","BASE_URL","process","env","REACT_APP_BASE_URL","Api","request","endpoint","data","arguments","length","undefined","method","console","debug","url","concat","headers","Authorization","token","log","params","err","error","response","message","Array","isArray","login","username","password","res","signup","firstName","lastName","getUserInfo","getLinkToken","link_token","exchangePublicToken","publicToken","authGet","authBalance","accountInfo","accounts","map","r","name","official_name","balance","balances","saveTransactions","transactions","getTransactions","year","month","orderByColumn","orderBy","startDate","String","padStart","endDate","Date","getDate","user","updateUser"],"sources":["/Users/jaleelwhaley/Desktop/Capstone2/frontend/src/Api.js"],"sourcesContent":["\nimport axios from \"axios\";\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n\n/** API Class.\n *\n * Static class tying together methods used to get/send to to the API.\n * There shouldn't be any frontend-specific stuff here, and there shouldn't\n * be any API-aware stuff elsewhere in the frontend.\n *\n */\n\nexport class Api {\n    // the token for interactive with the API will be stored here.\n    static token;\n\n\n    /* skeleton method for get calls  */\n    static async request(endpoint, data = {}, method = \"get\") {\n        console.debug(\"API Call:\", endpoint, data, method);\n\n        //there are multiple ways to pass an authorization token, this is how you pass it in the header.\n        //this has been provided to show you another way to pass the token. you are only expected to read this code for this project.\n        const url = `${BASE_URL}/${endpoint}`;\n        const headers = { Authorization: `Bearer ${Api.token}` };\n        console.log(\"headers::::::\", headers)\n        const params = (method === \"get\")\n            ? data\n            : {};\n\n        try {\n            return (await axios({ url, method, data, params, headers })).data;\n        } catch (err) {\n            console.error(\"API Error:\", err.response);\n            let message = err.response.data.error.message;\n            throw Array.isArray(message) ? message : [message];\n        }\n    }\n\n    // Individual API routes\n\n    /* Logs in a user */\n    static async login(username, password) {\n        let res = await this.request(`auth/token`, { username, password }, \"post\");\n        this.token = res.token;\n        console.log(\"login token,\", res.token)\n        return res.token;\n    }\n\n    /* registers a user */\n    static async signup(username, password, firstName, lastName) {\n        let res = await this.request(`auth/register`, { username, password, firstName, lastName }, \"post\");\n        this.token = res.token;\n        return res.token;\n    };\n\n    /* gets info on a user */\n    static async getUserInfo(username) {\n        let res = await this.request(`users/${username}`);\n        return res;\n    };\n\n    \n    static async getLinkToken() {\n        let res = await this.request(`plaid/create_link_token`, {},  \"post\");\n        return res.link_token;\n    };\n\n    static async exchangePublicToken(publicToken) {\n        let res = await this.request(`plaid/exchange_public_token`, {publicToken},  \"post\");\n        return res;\n    };\n\n    static async authGet() {\n        let res = await this.request(`plaid/auth`, {},  \"post\");\n        return res;\n    };\n\n    static async authBalance() {\n        let res = await this.request(`plaid/auth`, {},  \"post\");\n        const accountInfo = res.accounts.map(r => ({ name: r.official_name, balance: r.balances }));\n        return accountInfo;\n    };\n\n\n\n    static async saveTransactions(username) {\n        let res = await this.request(`plaid/transactions`, {username}, \"post\");\n        return res.transactions;\n    };\n    static async getTransactions( year, month, orderByColumn, orderBy) {\n        // Check year and month values\n        console.log('Year:', year);\n        console.log('Month:', month);\n\n        // Set the start date to the first day of the selected month\n        let startDate = `${year}-${String(month).padStart(2, '0')}-01`;\n\n        // Set the end date to the last day of the selected month\n        let endDate = `${year}-${String(month).padStart(2, '0')}-${new Date(year, month, 0).getDate()}`;\n\n        // Log API call parameters\n        console.log('API Call Parameters:', { orderByColumn, orderBy, startDate, endDate });\n\n        try {\n            let res = await this.request(`plaid/transactions`, {\n                user,\n                orderByColumn,\n                orderBy,\n                startDate,\n                endDate,\n            });\n            return res.transactions;\n        } catch (error) {\n            console.error(\"API Error:\", error);\n            throw error;\n        }\n    }\n\n    /* update User */\n    static async updateUser(username, data) {\n        let res = await this.request(`users/${username}`, data, \"patch\");\n        return res;\n    };\n\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"\"use strict\";\n\nrequire('dotenv').config();\nconst express = require(\"express\");\nconst {\n  authenticateJWT,\n  ensureLoggedIn\n} = require(\"./auth\");\nconst bodyParser = require('body-parser');\nconst {\n  NotFoundError,\n  UnauthorizedError\n} = require(\"./expressError\");\nconst User = require(\"./models/user\");\nconst morgan = require(\"morgan\");\nconst app = express();\nconst plaidRoutes = require(\"./routes/plaidApi\");\nconst usersRoutes = require(\"./routes/users\");\nconst authRoutes = require(\"./routes/auth\");\nconst cors = require(\"cors\");\nconst path = require('path');\nconst util = require('util');\napp.use(cors({\n  origin: 'http://localhost:3000'\n}));\napp.use(bodyParser.json());\napp.use(express.json());\napp.use(morgan(\"tiny\"));\napp.use(authenticateJWT);\napp.use(\"/plaid\", plaidRoutes);\napp.use(\"/users\", usersRoutes);\napp.use(\"/auth\", authRoutes);\n\n/** Handle 404 errors -- this matches everything */\napp.use(function (req, res, next) {\n  return next(new NotFoundError());\n});\n\n/** Generic error handler; anything unhandled goes here. */\napp.use(function (err, req, res, next) {\n  if (process.env.NODE_ENV !== \"test\") console.error(err.stack);\n  let status = err.status || 500;\n  let message = err.message;\n  if (err instanceof UnauthorizedError) {\n    status = 401;\n  }\n  return res.status(status).json({\n    error: {\n      message,\n      status\n    }\n  });\n});\nmodule.exports = app;","map":{"version":3,"names":["require","config","express","authenticateJWT","ensureLoggedIn","bodyParser","NotFoundError","UnauthorizedError","User","morgan","app","plaidRoutes","usersRoutes","authRoutes","cors","path","util","use","origin","json","req","res","next","err","process","env","NODE_ENV","console","error","stack","status","message","module","exports"],"sources":["/Users/jaleelwhaley/Desktop/Capstone2/frontend/src/App.js"],"sourcesContent":["\"use strict\";\n\nrequire('dotenv').config();\nconst express = require(\"express\");\nconst { authenticateJWT, ensureLoggedIn } = require(\"./auth\");\n\nconst bodyParser = require('body-parser');\nconst { NotFoundError, UnauthorizedError } = require(\"./expressError\");\nconst User = require(\"./models/user\");\nconst morgan = require(\"morgan\");\nconst app = express();\nconst plaidRoutes = require(\"./routes/plaidApi\");\nconst usersRoutes = require(\"./routes/users\");\nconst authRoutes = require(\"./routes/auth\");\nconst cors = require(\"cors\");\nconst path = require('path');\nconst util = require('util');\n\napp.use(cors({ origin: 'http://localhost:3000' }));\napp.use(bodyParser.json());\napp.use(express.json());\napp.use(morgan(\"tiny\"));\napp.use(authenticateJWT);\n\napp.use(\"/plaid\", plaidRoutes);\napp.use(\"/users\", usersRoutes);\napp.use(\"/auth\", authRoutes);\n\n/** Handle 404 errors -- this matches everything */\napp.use(function (req, res, next) {\n    return next(new NotFoundError());\n});\n\n/** Generic error handler; anything unhandled goes here. */\napp.use(function (err, req, res, next) {\n    if (process.env.NODE_ENV !== \"test\") console.error(err.stack);\n\n    let status = err.status || 500;\n    let message = err.message;\n\n    if (err instanceof UnauthorizedError) {\n        status = 401;\n    }\n\n    return res.status(status).json({\n        error: { message, status },\n    });\n});\n\nmodule.exports = app;\n"],"mappings":"AAAA,YAAY;;AAEZA,OAAO,CAAC,QAAQ,CAAC,CAACC,MAAM,CAAC,CAAC;AAC1B,MAAMC,OAAO,GAAGF,OAAO,CAAC,SAAS,CAAC;AAClC,MAAM;EAAEG,eAAe;EAAEC;AAAe,CAAC,GAAGJ,OAAO,CAAC,QAAQ,CAAC;AAE7D,MAAMK,UAAU,GAAGL,OAAO,CAAC,aAAa,CAAC;AACzC,MAAM;EAAEM,aAAa;EAAEC;AAAkB,CAAC,GAAGP,OAAO,CAAC,gBAAgB,CAAC;AACtE,MAAMQ,IAAI,GAAGR,OAAO,CAAC,eAAe,CAAC;AACrC,MAAMS,MAAM,GAAGT,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAMU,GAAG,GAAGR,OAAO,CAAC,CAAC;AACrB,MAAMS,WAAW,GAAGX,OAAO,CAAC,mBAAmB,CAAC;AAChD,MAAMY,WAAW,GAAGZ,OAAO,CAAC,gBAAgB,CAAC;AAC7C,MAAMa,UAAU,GAAGb,OAAO,CAAC,eAAe,CAAC;AAC3C,MAAMc,IAAI,GAAGd,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMe,IAAI,GAAGf,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMgB,IAAI,GAAGhB,OAAO,CAAC,MAAM,CAAC;AAE5BU,GAAG,CAACO,GAAG,CAACH,IAAI,CAAC;EAAEI,MAAM,EAAE;AAAwB,CAAC,CAAC,CAAC;AAClDR,GAAG,CAACO,GAAG,CAACZ,UAAU,CAACc,IAAI,CAAC,CAAC,CAAC;AAC1BT,GAAG,CAACO,GAAG,CAACf,OAAO,CAACiB,IAAI,CAAC,CAAC,CAAC;AACvBT,GAAG,CAACO,GAAG,CAACR,MAAM,CAAC,MAAM,CAAC,CAAC;AACvBC,GAAG,CAACO,GAAG,CAACd,eAAe,CAAC;AAExBO,GAAG,CAACO,GAAG,CAAC,QAAQ,EAAEN,WAAW,CAAC;AAC9BD,GAAG,CAACO,GAAG,CAAC,QAAQ,EAAEL,WAAW,CAAC;AAC9BF,GAAG,CAACO,GAAG,CAAC,OAAO,EAAEJ,UAAU,CAAC;;AAE5B;AACAH,GAAG,CAACO,GAAG,CAAC,UAAUG,GAAG,EAAEC,GAAG,EAAEC,IAAI,EAAE;EAC9B,OAAOA,IAAI,CAAC,IAAIhB,aAAa,CAAC,CAAC,CAAC;AACpC,CAAC,CAAC;;AAEF;AACAI,GAAG,CAACO,GAAG,CAAC,UAAUM,GAAG,EAAEH,GAAG,EAAEC,GAAG,EAAEC,IAAI,EAAE;EACnC,IAAIE,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,MAAM,EAAEC,OAAO,CAACC,KAAK,CAACL,GAAG,CAACM,KAAK,CAAC;EAE7D,IAAIC,MAAM,GAAGP,GAAG,CAACO,MAAM,IAAI,GAAG;EAC9B,IAAIC,OAAO,GAAGR,GAAG,CAACQ,OAAO;EAEzB,IAAIR,GAAG,YAAYhB,iBAAiB,EAAE;IAClCuB,MAAM,GAAG,GAAG;EAChB;EAEA,OAAOT,GAAG,CAACS,MAAM,CAACA,MAAM,CAAC,CAACX,IAAI,CAAC;IAC3BS,KAAK,EAAE;MAAEG,OAAO;MAAED;IAAO;EAC7B,CAAC,CAAC;AACN,CAAC,CAAC;AAEFE,MAAM,CAACC,OAAO,GAAGvB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
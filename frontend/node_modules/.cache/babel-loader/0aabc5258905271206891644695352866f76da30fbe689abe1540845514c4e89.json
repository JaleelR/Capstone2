{"ast":null,"code":"var _jsxFileName = \"/Users/jaleelwhaley/Desktop/Capstone2/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport { RoutesComponent } from './RoutesComponent';\nimport { usePlaidLink } from 'react-plaid-link';\nimport { Api } from './Api';\nimport logo from './logo.svg';\nimport { jwtDecode } from \"jwt-decode\";\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [userToken, setUserToken] = useState();\n  useEffect(() => {\n    async function getUser() {\n      if (token) {\n        console.log(\"useEffecttoken\", token);\n        try {\n          let {\n            username\n          } = jwtDecode(token);\n          JoblyApi.token = token;\n          //found error!\n          console.log(\"userrrrnammmmeeee\", username);\n          let user = await JoblyApi.getUserInfo(username);\n          console.log(\"userrrrrrrrrr\", user);\n          setCurrentUser(user);\n          setApplied(new Set(currentUser.user.applications));\n          setLoading(false); // Set loading to false after user info is fetched\n        } catch (e) {\n          console.log(\"Error:\", e);\n          setLoading(false); // Set loading to false in case of error\n        }\n      } else {\n        setCurrentUser(null);\n        setLoading(false); // Set loading to false if token is not found\n      }\n    }\n    getUser();\n  }, [token]);\n  async function temp() {\n    const tempT = await Api.getTempToken();\n    console.log(\"temporary token:\", tempT);\n  }\n  async function register(username, password, firstName, lastName) {\n    try {\n      const gotToken = await Api.signup(username, password, firstName, lastName);\n      setUserToken(gotToken);\n      console.log(\"userToken:\", gotToken);\n    } catch (e) {\n      console.log(\"Error:\", e);\n    }\n  }\n  ;\n  return /*#__PURE__*/_jsxDEV(BrowserRouter, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"App-header\",\n        children: /*#__PURE__*/_jsxDEV(RoutesComponent, {\n          register: register,\n          temp: temp\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 10\n  }, this);\n}\n_s(App, \"IU2pL/xkXOmvEMEqhvGcNl4DYW8=\");\n_c = App;\n;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","BrowserRouter","RoutesComponent","usePlaidLink","Api","logo","jwtDecode","jsxDEV","_jsxDEV","App","_s","currentUser","setCurrentUser","userToken","setUserToken","getUser","token","console","log","username","JoblyApi","user","getUserInfo","setApplied","Set","applications","setLoading","e","temp","tempT","getTempToken","register","password","firstName","lastName","gotToken","signup","children","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jaleelwhaley/Desktop/Capstone2/frontend/src/App.js"],"sourcesContent":["import React, {useEffect, useState} from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport { RoutesComponent } from './RoutesComponent';\nimport { usePlaidLink } from 'react-plaid-link';\nimport { Api } from './Api';\nimport logo from './logo.svg';\nimport { jwtDecode } from \"jwt-decode\";\nimport './App.css';\n\n\nfunction App() {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [userToken, setUserToken] = useState();\n\n  useEffect(() => {\n    async function getUser() {\n      if (token) {\n        console.log(\"useEffecttoken\", token)\n        try {\n          let { username } = jwtDecode(token);\n          JoblyApi.token = token;\n          //found error!\n          console.log(\"userrrrnammmmeeee\", username);\n          let user = await JoblyApi.getUserInfo(username);\n\n\n          console.log(\"userrrrrrrrrr\", user);\n          setCurrentUser(user);\n          setApplied(new Set(currentUser.user.applications));\n          setLoading(false); // Set loading to false after user info is fetched\n        } catch (e) {\n          console.log(\"Error:\", e);\n          setLoading(false); // Set loading to false in case of error\n        }\n      } else {\n        setCurrentUser(null);\n        setLoading(false); // Set loading to false if token is not found\n      }\n    }\n    getUser();\n  }, [token]);\n\n\n\n    async function temp() {\n      const tempT = await Api.getTempToken();\n      console.log(\"temporary token:\", tempT);\n    }\n  \n\n\n  async function register(username, password, firstName, lastName) {\n    try {\n      const gotToken = await Api.signup(username, password, firstName, lastName);\n      setUserToken(gotToken);\n      console.log(\"userToken:\", gotToken);\n\n    } catch (e) {\n      console.log(\"Error:\", e)\n    }\n  };\n\n\n\n\n  \n \n\n\n\n\n  return (\n         <BrowserRouter>\n    <div className=\"App\">\n        <header className=\"App-header\">\n\n         \n          <RoutesComponent register={register} temp={temp}  />\n      </header>\n    </div >\n       </BrowserRouter> \n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}